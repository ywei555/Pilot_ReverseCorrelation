`1_Event` <- read.csv("~/Desktop/Unity_ITC/RawData_Unity_ITC/1/1_Event.txt", sep="")
View(`1_Event`)
1_Event<- read.delim("~/Desktop/Unity_ITC/RawData_Unity_ITC/1/1_Event.txt", sep="")
Event1<- read.delim("~/Desktop/Unity_ITC/RawData_Unity_ITC/1/1_Event.txt", sep="")
`1_Event` <- read.csv("~/Desktop/Unity_ITC/RawData_Unity_ITC/1/1_Event.txt", sep="")
View(`1_Event`)
f
z-1
x=1
f
f=
f
f=x+1
x=1
f
f=4*x^3+18x^2
f=4*x^3+18*x^2
x=-3
f
x=1
f
x=2
f
?here
install.packages(here)
install.packages("here")
library(here)
library(tidyverse)
loc_dw = here("data", "pilot_dw.csv")
data_dw = read.csv(file = loc_dw)
loc_dw = here("/Users/yi/Desktop/EL/RC/demo/code/data", "pilot_dw.csv")
data_dw = read.csv(file = loc_dw)
View(data_dw)
View(data_dw)
#clean environment
rm(list= ls())
library(pracma)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(pracma)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#clean environment
rm(list= ls())
library(here)
library(tidyverse)
library(pracma)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
loc_dw = here("/Users/yi/Desktop/EL/RC/demo/code/data", "pilot_dw.csv")
data_dw = read.csv(file = loc_dw)
loc_sw = =here("./data/", "pilot_sw.csv")
loc_sw = here("./data/", "pilot_sw.csv")
loc_sw = here("./data/", "pilot_sw.csv")
data_sw = read.csv(file = loc_sw)
loc_sw = here("../data/", "pilot_sw.csv")
data_sw = read.csv(file = loc_sw)
library(pracma)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#clean environment
rm(list= ls())
data_dw = read.csv("./data/pilot_dw.csv")
data_sw = read.csv("./data/pilot_sw.csv")
data_yw = read.csv("./data/pilot_yw.csv")
View(data_dw)
View(data_dw)
View(data_sw)
View(data_sw)
View(data_yw)
View(data_yw)
data_dw
data_dw[1,]
data_dw[1:4,]
dim(data_dw)
data_dw = data_dw[3:dim(data_dw)[1],]
data_dw = data_dw[3:dim(data_dw)[1],]
data_sw = data_sw[3:dim(data_sw)[1],]
data_yw = data_yw[3:dim(data_yw)[1],]
View(data_dw)
View(data_sw)
View(data_sw)
View(data_dw)
#clean environment
rm(list= ls())
data_dw = read.csv("./data/pilot_dw.csv")
data_sw = read.csv("./data/pilot_sw.csv")
data_yw = read.csv("./data/pilot_yw.csv")
data_dw = data_dw[3:dim(data_dw)[1],]
data_sw = data_sw[3:dim(data_sw)[1],]
data_yw = data_yw[3:dim(data_yw)[1],]
data_dw$response
data_dw$response = "j"
#clean environment
rm(list= ls())
data_dw = read.csv("./data/pilot_dw.csv")
data_sw = read.csv("./data/pilot_sw.csv")
data_yw = read.csv("./data/pilot_yw.csv")
data_dw = data_dw[3:dim(data_dw)[1],]
data_sw = data_sw[3:dim(data_sw)[1],]
data_yw = data_yw[3:dim(data_yw)[1],]
data_dw$response == "j"
?generateCI
install.packages("rcicr")
install.packages(“devtools”) devtools::install_github(“rdotsch/rcicr”, ref = “development”)
library(rcicr)
?generateCI
load("/Users/yi/Desktop/EL/RC/demo/code/stimuli/rcic_seed_1_time_Jan_19_2022_03_24.Rdata")
View(p)
View(stimuli_params)
base_faces
dim(base_faces)
length(base_faces)
class(base_faces)
length(base_faces[[1]])
dim(base_faces[[1]])
length(base_face_files)
length(base_face_files[[1]])
dim(base_face_files[[1]])
base_face_files[[1]]
stimuli_params
length(stimuli_params)
class(stimuli_params)
class(stimuli_params[[1]])
dim(stimuli_params[[1]])
View(stimuli_params)
# Path to rdata-file holding all stimulus parameters, cre- ated when generating stimuli
rdata <- "./stimuli/rcic_seed_1_time_Jan_19_2022_03_24.Rdata"
#clean environment
rm(list= ls())
load(rdata)
# Path to rdata-file holding all stimulus parameters, cre- ated when generating stimuli
rdata <- "./stimuli/rcic_seed_1_time_Jan_19_2022_03_24.Rdata"
load(rdata)
p
p$generator_version
p$patchIdx
p$patches
dim(p$patches)
ci <- generateCI(1, 1, “base”, rdata)
ci <- generateCI(1, 1, "../img/base.png", rdata)
ci <- generateCI(1, 1, "base", rdata)
ci
image.plot(ci)
image(ci)
dim(ci)
class(ci)
dim(ci[[1]])
image(ci[[1]])
ci <- generateCI(1, 1, "base2", rdata)
ones(300,1)
c(ones(300,1))
ci <- generateCI(1:300, c(ones(300,1)), "base", rdata)
dim(ci)
length(ci)
ci
image(ci$combined)
image(ci$ci)
image(ci$scaled)
image(ci$base)
data_dw = read.csv("./data/pilot_dw.csv")
data_dw = data_dw[3:dim(data_dw)[1],]
data_dw$response
c_dw = (data_dw$response == "j") - (data_dw$response == "f")
c_dw
?generateCI
ci_dw <- generateCI(1:100, c_dw, "base", rdata)
image(ci$combined)
#clean environment
rm(list= ls())
data_dw = read.csv("./data/pilot_dw.csv")
data_sw = read.csv("./data/pilot_sw.csv")
data_yw = read.csv("./data/pilot_yw.csv")
data_dw = data_dw[3:dim(data_dw)[1],]
data_sw = data_sw[3:dim(data_sw)[1],]
data_yw = data_yw[3:dim(data_yw)[1],]
# Path to rdata-file holding all stimulus parameters, cre- ated when generating stimuli
rdata <- "./stimuli/rcic_seed_1_time_Jan_19_2022_03_24.Rdata"
load(rdata)
c_dw = (data_dw$response == "j") - (data_dw$response == "f")
c_sw = (data_sw$response == "j") - (data_sw$response == "f")
c_yw = (data_yw$response == "j") - (data_yw$response == "f")
ci_dw <- generateCI(1:100, c_dw, "base", rdata)
ci_sw <- generateCI(101:200, c_sw, "base", rdata)
ci_yw <- generateCI(201:300, c_yw, "base", rdata)
image.plot
library(fields)
image.plot(ci_dw$combined)
image.plot(grayscale(ci_dw$combined))
image.plot(greyscale(ci_dw$combined))
library(imager)
install.packages('imager')
library(imager)
image.plot(grayscale(ci_dw$combined))
image.plot(greyscale(ci_dw$combined))
library(imager)
install.packages('imager')
library(imager)
image.plot(ci_dw$combined, col = c('white',"black"))
image.plot(ci_dw$combined, col = gray.colors(10, start = 0.3, end = 0.9, gamma = 2.2, alpha = NULL))
image.plot(t(ci_dw$combined), col = gray.colors(10, start = 0.3, end = 0.9, gamma = 2.2, alpha = NULL))
image(ci_dw$combined, col = gray.colors(10, start = 0.3, end = 0.9, gamma = 2.2, alpha = NULL))
image(t(ci_dw$combined), col = gray.colors(10, start = 0.3, end = 0.9, gamma = 2.2, alpha = NULL))
?image
?image.plot
?image
install.packages('adimpro')
library(adimpro)
image(rotate.image(ci_dw$combined, angle = 90), col = gray.colors(10, start = 0.3, end = 0.9, gamma = 2.2, alpha = NULL))
library(adimpro)
rotate.image(ci_dw$combined, angle = 90)
image(t(ci_dw$combined), col = gray.colors(10, start = 0.3, end = 0.9, gamma = 2.2, alpha = NULL))
image(t(ci_sw$combined), col = gray.colors(10, start = 0.3, end = 0.9, gamma = 2.2, alpha = NULL))
image(t(ci_yw$combined), col = gray.colors(10, start = 0.3, end = 0.9, gamma = 2.2, alpha = NULL))
install.packages('OpenImageR')
library(OpenImageR)
image(flipImage(ci_dw$combined), col = gray.colors(10, start = 0.3, end = 0.9, gamma = 2.2, alpha = NULL))
image(flipImage(t(ci_dw$combined)), col = gray.colors(10, start = 0.3, end = 0.9, gamma = 2.2, alpha = NULL))
image(flipImage(t(ci_dw$combined)), col = gray.colors(10, start = 0.3, end = 0.9, gamma = 2.2, alpha = NULL))
image(flipImage(t(ci_sw$combined)), col = gray.colors(10, start = 0.3, end = 0.9, gamma = 2.2, alpha = NULL))
image(flipImage(t(ci_yw$combined)), col = gray.colors(10, start = 0.3, end = 0.9, gamma = 2.2, alpha = NULL))
par(mfrow = c(1,3))
image(flipImage(t(ci_dw$combined)), col = gray.colors(10, start = 0.3, end = 0.9, gamma = 2.2, alpha = NULL))
image(flipImage(t(ci_sw$combined)), col = gray.colors(10, start = 0.3, end = 0.9, gamma = 2.2, alpha = NULL))
image(flipImage(t(ci_yw$combined)), col = gray.colors(10, start = 0.3, end = 0.9, gamma = 2.2, alpha = NULL))
ci2_dw <- generateCI(1:100, -c_dw, "base", rdata)
ci2_sw <- generateCI(101:200, -c_sw, "base", rdata)
ci2_yw <- generateCI(201:300, -c_yw, "base", rdata)
par(mfrow = c(2,3))
image(flipImage(t(ci_dw$combined)), col = gray.colors(10, start = 0.3, end = 0.9, gamma = 2.2, alpha = NULL))
image(flipImage(t(ci_sw$combined)), col = gray.colors(10, start = 0.3, end = 0.9, gamma = 2.2, alpha = NULL))
image(flipImage(t(ci_yw$combined)), col = gray.colors(10, start = 0.3, end = 0.9, gamma = 2.2, alpha = NULL))
image(flipImage(t(ci2_dw$combined)), col = gray.colors(10, start = 0.3, end = 0.9, gamma = 2.2, alpha = NULL))
image(flipImage(t(ci2_sw$combined)), col = gray.colors(10, start = 0.3, end = 0.9, gamma = 2.2, alpha = NULL))
image(flipImage(t(ci2_yw$combined)), col = gray.colors(10, start = 0.3, end = 0.9, gamma = 2.2, alpha = NULL))
c_dw
data_dw$firstImage
data_dw$stimulus
data_dw$trial_index
data_dw$internal_node_id
data_dw$firstImage
substring(data_dw$firstImage)
library(stringr)
strsplit(data_dw$firstImage,'_')
str_split(data_dw$firstImage,'_')
library(pracma)
arrayfun(function(x)x[3],str_split(data_dw$firstImage,'_'))
arrayfun(function(x)str2num(x[4]),str_split(data_dw$firstImage,'_'))
od_dw = arrayfun(function(x)str2num(x[4]),str_split(data_dw$firstImage,'_'))
od_dw = c(arrayfun(function(x)str2num(x[4]),str_split(data_dw$firstImage,'_')))
od_dw
data_dw$firstImage
str_split(data_dw$firstImage,'_')
od_dw = c(arrayfun(function(x)str2num(x[4]),str_split(data_dw$firstImage,'_')))
od_dw
library(pracma)
od_dw = c(arrayfun(function(x)str2num(x[4]),str_split(data_dw$firstImage,'_')))
od_sw = c(arrayfun(function(x)str2num(x[4]),str_split(data_sw$firstImage,'_')))
od_yw = c(arrayfun(function(x)str2num(x[4]),str_split(data_yw$firstImage,'_')))
ci_dw <- generateCI(od_dw, c_dw, "base", rdata)
ci_sw <- generateCI(od_sw, c_sw, "base", rdata)
ci_yw <- generateCI(od_yw, c_yw, "base", rdata)
ci2_dw <- generateCI(od_dw, -c_dw, "base", rdata)
ci2_sw <- generateCI(od_sw, -c_sw, "base", rdata)
ci2_yw <- generateCI(od_yw, -c_yw, "base", rdata)
library(fields)
library(imager)
library(adimpro)
library(OpenImageR)
library(fields)
library(OpenImageR)
par(mfrow = c(2,3))
image(flipImage(t(ci_dw$combined)), col = gray.colors(10, start = 0.3, end = 0.9, gamma = 2.2, alpha = NULL))
image(flipImage(t(ci_sw$combined)), col = gray.colors(10, start = 0.3, end = 0.9, gamma = 2.2, alpha = NULL))
image(flipImage(t(ci_yw$combined)), col = gray.colors(10, start = 0.3, end = 0.9, gamma = 2.2, alpha = NULL))
image(flipImage(t(ci2_dw$combined)), col = gray.colors(10, start = 0.3, end = 0.9, gamma = 2.2, alpha = NULL))
image(flipImage(t(ci2_sw$combined)), col = gray.colors(10, start = 0.3, end = 0.9, gamma = 2.2, alpha = NULL))
image(flipImage(t(ci2_yw$combined)), col = gray.colors(10, start = 0.3, end = 0.9, gamma = 2.2, alpha = NULL))
ci_w <- generateCI(c(od_dw, od_sw, od_yw), c(c_dw, c_sw, c_yw), "base", rdata)
ci2_w <- generateCI(c(od_dw, od_sw, od_yw), -c(c_dw, c_sw, c_yw), "base", rdata)
par(mfrow = c(2,1))
image(flipImage(t(ci_w$combined)), col = gray.colors(10, start = 0.3, end = 0.9, gamma = 2.2, alpha = NULL))
image(flipImage(t(ci2_w$combined)), col = gray.colors(10, start = 0.3, end = 0.9, gamma = 2.2, alpha = NULL))
data_dw$firstImage
str_split(data_dw$firstImage,'_')
str2num(x[4])
?str2num
?generateStimuli2IFC
library(rcicr)
library(pracma)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#clean environment
rm(list= ls())
data_dw = read.csv("./data/pilot_dw.csv")
data_sw = read.csv("./data/pilot_sw.csv")
data_yw = read.csv("./data/pilot_yw.csv")
data_dw = data_dw[3:dim(data_dw)[1],]
data_sw = data_sw[3:dim(data_sw)[1],]
data_yw = data_yw[3:dim(data_yw)[1],]
# Path to rdata-file holding all stimulus parameters, cre- ated when generating stimuli
rdata <- "./stimuli/rcic_seed_1_time_Jan_19_2022_03_24.Rdata"
load(rdata)
c_dw = (data_dw$response == "j") - (data_dw$response == "f")
c_sw = (data_sw$response == "j") - (data_sw$response == "f")
c_yw = (data_yw$response == "j") - (data_yw$response == "f")
library(stringr)
library(pracma)
od_dw = c(arrayfun(function(x)str2num(x[4]),str_split(data_dw$firstImage,'_')))
od_sw = c(arrayfun(function(x)str2num(x[4]),str_split(data_sw$firstImage,'_')))
od_yw = c(arrayfun(function(x)str2num(x[4]),str_split(data_yw$firstImage,'_')))
ci_dw <- generateCI(od_dw, c_dw, "base", rdata)
ci_sw <- generateCI(od_sw, c_sw, "base", rdata)
ci_yw <- generateCI(od_yw, c_yw, "base", rdata)
ci_w <- generateCI(c(od_dw, od_sw, od_yw), c(c_dw, c_sw, c_yw), "base", rdata)
ci2_dw <- generateCI(od_dw, -c_dw, "base", rdata)
ci2_sw <- generateCI(od_sw, -c_sw, "base", rdata)
ci2_yw <- generateCI(od_yw, -c_yw, "base", rdata)
ci2_w <- generateCI(c(od_dw, od_sw, od_yw), -c(c_dw, c_sw, c_yw), "base", rdata)
library(fields)
library(OpenImageR)
par(mfrow = c(2,3))
image(flipImage(t(ci_dw$combined)), col = gray.colors(10, start = 0.3, end = 0.9, gamma = 2.2, alpha = NULL))
image(flipImage(t(ci_sw$combined)), col = gray.colors(10, start = 0.3, end = 0.9, gamma = 2.2, alpha = NULL))
image(flipImage(t(ci_yw$combined)), col = gray.colors(10, start = 0.3, end = 0.9, gamma = 2.2, alpha = NULL))
image(flipImage(t(ci2_dw$combined)), col = gray.colors(10, start = 0.3, end = 0.9, gamma = 2.2, alpha = NULL))
image(flipImage(t(ci2_sw$combined)), col = gray.colors(10, start = 0.3, end = 0.9, gamma = 2.2, alpha = NULL))
image(flipImage(t(ci2_yw$combined)), col = gray.colors(10, start = 0.3, end = 0.9, gamma = 2.2, alpha = NULL))
par(mfrow = c(2,1))
image(flipImage(t(ci_w$combined)), col = gray.colors(10, start = 0.3, end = 0.9, gamma = 2.2, alpha = NULL))
image(flipImage(t(ci2_w$combined)), col = gray.colors(10, start = 0.3, end = 0.9, gamma = 2.2, alpha = NULL))
library(rstudioapi)
library(rcicr)
library(png)
library(tictoc)
library(pracma)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#clean environment
rm(list= ls())
# get base image
bi= readPNG('../code/base_image/base_female.png')
grid::grid.raster(bi)
graphics.off()
# generate stimulus
#tic()
generateStimuli2IFC(list(base ="../code/stimuli/female/"), n_trials = 100, img_size = 224, noise_type = 'sinusoid', maximize_baseimage_contrast = T)
# generate stimulus
#tic()
generateStimuli2IFC(list(base ="../code/base_image/base_female.png"), n_trials = 100, img_size = 224, noise_type = 'sinusoid', maximize_baseimage_contrast = T)
# generate stimulus
#tic()
generateStimuli2IFC(list(base ="../code/base_image/base_female.png"), n_trials = 100, img_size = 224, noise_type = 'sinusoid', maximize_baseimage_contrast = T)
# generate path of stimulus images
fprintf("", file = 'a.txt', append = F)
n0 <- function(i, n = 5){
ni = ceil(log(i+1)/log(10))
if (ni < n){
out = rep('0',n - ni)
out = paste(out, collapse = '')
}else {
out = ''
}
out = sprintf('%s%d', out, i)
return(out)
}
for (i in 1:100) {
fprintf("'code/stimuli/rcic_base_1_%s_inv.png',\n'code/stimuli/rcic_base_1_%s_ori.png',\n", n0(i), n0(i), file = 'a.txt', append = T)
}
# generate display images in pair
fprintf("", file = 'b.txt', append = F)
for ( ii in 0:99) {
fprintf("{firstImage: images[%d], secondImage: images[%d]},\n", 2*ii, 2*ii+1, file = 'b.txt', append = T)
}
library(rstudioapi)
library(rcicr)
library(png)
library(tictoc)
library(pracma)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#clean environment
rm(list= ls())
# get base image
bi= readPNG('../code/base_image/base_female.png')
grid::grid.raster(bi)
graphics.off()
# get base image
bi= readPNG('../code/base_image/base_female.png')
grid::grid.raster(bi)
graphics.off()
# generate stimulus
#tic()
generateStimuli2IFC(list(base ="../code/base_image/base_female.png"), n_trials = 100, img_size = 224, noise_type = 'sinusoid', maximize_baseimage_contrast = T)
library(rstudioapi)
library(rcicr)
library(png)
library(tictoc)
library(pracma)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#clean environment
rm(list= ls())
# get base image
bi= readPNG('../code/base_image/base_female.png')
grid::grid.raster(bi)
graphics.off()
# generate stimulus
#tic()
generateStimuli2IFC(list(base ="../code/base_image/base_female.png"), n_trials = 100, img_size = 224, noise_type = 'sinusoid', maximize_baseimage_contrast = T)
library(rstudioapi)
library(rcicr)
library(png)
library(tictoc)
library(pracma)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#clean environment
rm(list= ls())
# get base image
bi= readPNG('../code/base_image/base_female.png')
grid::grid.raster(bi)
graphics.off()
# generate stimulus
#tic()
generateStimuli2IFC(list(base ="../code/base_image/base_female.png"), n_trials = 100, img_size = 224, noise_type = 'sinusoid', maximize_baseimage_contrast = T)
getws()
getwd()
library(png)
library(rstudioapi)
library(rcicr)
library(png)
library(tictoc)
library(pracma)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#clean environment
rm(list= ls())
# get base image
bi= readPNG('../code/base_image/base_female.png')
grid::grid.raster(bi)
graphics.off()
# generate stimulus
#tic()
generateStimuli2IFC(list(base ="../code/base_image/base_female.png"), n_trials = 100, img_size = 224, noise_type = 'sinusoid', maximize_baseimage_contrast = T)
getwd()
# generate stimulus
#tic()
generateStimuli2IFC(list(base ="../code/base_image/base_female.png"), n_trials = 100, img_size = 224, noise_type = 'sinusoid', maximize_baseimage_contrast = T)
generateStimuli2IFC
# generate stimulus
#tic()
generateStimuli2IFC(list(base ="../code/base_image/base_female.png"), n_trials = 100, img_size = 224, noise_type = 'sinusoid', maximize_baseimage_contrast = T, ncores = 1)
,=
?generateStimuli2IFC
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# get base image
bi= readPNG('../code/base_image/base_female.png')
grid::grid.raster(bi)
graphics.off()
bi
# generate stimulus
#tic()
generateStimuli2IFC(list(base ="../code/base_image/base_female.png"), n_trials = 100, img_size = 224, noise_type = 'sinusoid', maximize_baseimage_contrast = T, stimulus_path = "")
library(rstudioapi)
library(rcicr)
library(png)
library(tictoc)
library(pracma)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#clean environment
rm(list= ls())
# get base image
bi= readPNG('../code/base_image/base.png')
grid::grid.raster(bi)
graphics.off()
# generate stimulus
#tic()
generateStimuli2IFC(list(base ="../code/base_image/base.png"), n_trials = 100, img_size = 224, noise_type = 'sinusoid', maximize_baseimage_contrast = T, stimulus_path = "")
